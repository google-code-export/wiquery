/*
 * Copyright (c) 2009 WiQuery team
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.odlabs.wiquery.core.commons;

import java.util.HashMap;
import java.util.Map;

import org.apache.wicket.Application;
import org.apache.wicket.IClusterable;
import org.apache.wicket.Resource;
import org.apache.wicket.ResourceReference;
import org.apache.wicket.javascript.IJavascriptCompressor;
import org.apache.wicket.util.resource.IResourceStream;
import org.apache.wicket.util.resource.StringResourceStream;
import org.apache.wicket.util.template.PackagedTextTemplate;
import org.apache.wicket.util.time.Time;

/**
 * $Id$
 * <p>
 * 	Makes the JavaScript template generated by wiQuery a static resource.
 * </p>
 * @author Lionel Armanet
 * @since 1.0
 */
public class WiqueryGeneratedJavaScriptResourceReference extends
		ResourceReference implements IClusterable {
	// Constants
	/** Constant of serialization */
	private static final long serialVersionUID = 1L;
	
	/** Template's name */
	private static final String TEMPLATE_NAME = "wiquery-gen.js";
	
	// Properties
	private CharSequence javaScriptCode;
	private PackagedTextTemplate jstemplate = new PackagedTextTemplate(WiqueryGeneratedJavaScriptResourceReference.class, "wiquery-gen.js");
	
	/**
	 * Method creating the javascript code for the wiQuery
	 * @param javaScriptCode
	 * @return the javascript
	 */
	public static String wiqueryGeneratedJavascriptCode(CharSequence javaScriptCode) {
		PackagedTextTemplate jstemplate = new PackagedTextTemplate(WiqueryGeneratedJavaScriptResourceReference.class, "wiquery-gen.js");
		IJavascriptCompressor compressor = Application.get()
			.getResourceSettings()
			.getJavascriptCompressor();
	
		Map<String, Object> genJs = new HashMap<String, Object>();
		genJs.put("wiqueryoutput", compressor == null ? 
				javaScriptCode : compressor.compress(javaScriptCode.toString()));
		jstemplate.interpolate(genJs);
		
		return jstemplate.asString();
	}
	
	/**
	 * Constructor
	 * @param javaScriptCode
	 */
	public WiqueryGeneratedJavaScriptResourceReference(CharSequence javaScriptCode) {
		super(WiqueryGeneratedJavaScriptResourceReference.class, System.currentTimeMillis() + TEMPLATE_NAME);
		this.javaScriptCode = javaScriptCode;
	}

	/**
	 * Creates a new resource which returns the interpolated value of the text
	 * template.
	 * 
	 * @return a new resource which returns the interpolated value of the text
	 *         template
	 */
	protected Resource newResource() {
		return new Resource() {
			private static final long serialVersionUID = 1L;

			/**
			 * {@inheritDoc}
			 * @see org.apache.wicket.Resource#getResourceStream()
			 */
			public IResourceStream getResourceStream() {
				final String stringValue = wiqueryGeneratedJavascriptCode(javaScriptCode);
				return new StringResourceStream(stringValue);
			}
		};
	}

	/**
	 * Returns the last modified time of the {@link PackagedTextTemplate}
	 * itself.
	 * 
	 * @return the last modified time of the {@link PackagedTextTemplate} itself
	 */
	public Time lastModifiedTime() {
		return jstemplate.lastModifiedTime();
	}
}