package org.odlabs.wiquery.commons;

import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;

import junit.framework.Assert;
import junit.framework.TestCase;

import org.apache.wicket.Page;
import org.apache.wicket.markup.MarkupParser;
import org.apache.wicket.markup.MarkupStream;
import org.apache.wicket.util.diff.Diff;
import org.apache.wicket.util.diff.DifferentiationFailedException;
import org.apache.wicket.util.diff.Revision;
import org.apache.wicket.util.io.Streams;
import org.apache.wicket.util.resource.ResourceStreamNotFoundException;
import org.apache.wicket.util.string.StringList;
import org.apache.wicket.util.tester.WicketTester;
import org.odlabs.wiquery.utils.WiQueryWebApplication;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.annotations.Test;

/**
 * Test case for testing wiQuery behaviors & components (all shall have reference
 * on the jQuery Core  and on the jQuery UI core)
 * @author Julien Roche
 *
 */
public abstract class WiqueryTestCase extends TestCase {
	// Static Properties
	private WicketTester wicketTester;
	private WiQueryWebApplication wiQueryWebApplication;
	
	protected static final Logger log = LoggerFactory.getLogger(WiqueryTestCase.class);
	
	/**
	 * @param a
	 *            String a
	 * @param b
	 *            String b
	 * @return True if the two strings have the same markup tags
	 */
	private boolean compareMarkup(final String a, final String b)
	{
		try
		{
			// Parse a and b into markup and compare
			final MarkupStream amarkup = new MarkupStream(new MarkupParser(a).parse());
			final MarkupStream bmarkup = new MarkupStream(new MarkupParser(b).parse());
			return amarkup.equalTo(bmarkup);
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		catch (ResourceStreamNotFoundException e)
		{
			e.printStackTrace();
		}
		return false;
	}
	
	/**Method retrieving the used WicketTester
	 * @return the WicketTester
	 */
	protected final WicketTester getWicketTester() {
		return wicketTester;
	}
	
	/**Method retrieving the WiqueryTestPage to used
	 * @return the test page
	 */
	protected abstract Class<? extends WiqueryTestPage> getWiqueryTestPage();
	
	/**Method retrieving the used WiQueryWebApplication
	 * @return the WiQueryWebApplication
	 */
	protected final WiQueryWebApplication getWiQueryWebApplication() {
		return wiQueryWebApplication;
	}
	
	/* (non-Javadoc)
	 * @see junit.framework.TestCase#setUp()
	 */
	@Override
	protected final void setUp() throws Exception {
		wiQueryWebApplication = new WiQueryWebApplication() {
			/* (non-Javadoc)
			 * @see org.apache.wicket.Application#getHomePage()
			 */
			@Override
			public Class<? extends Page> getHomePage() {
				return null;
			}
			
		};
		wicketTester = new WicketTester(wiQueryWebApplication);
	}
	
	/**
	 * Test the statement
	 */
	@Test
	public abstract void testMethod();
	
	/**
	 * Test the statement
	 */
	@Test
	public abstract void testStatement();
	
	/**
	 * Test based functionalities
	 * @throws IOException 
	 */
	@Test
	public void testWiqueryPage() throws IOException {
		/*// Go to the wiquery test page
		log.info("WicketTester on : " + getWiqueryTestPage());
		wicketTester.startPage(getWiqueryTestPage());
		wicketTester.assertRenderedPage(getWiqueryTestPage());
		
		// getting generated response
		String document = wicketTester.getServletResponse().getDocument();
		log.info("Servlet Response : \n" + document);
		
		// Validation
		Assert.assertTrue(validatePage(document, getClass(),
				getWiqueryTestPage().getSimpleName() + "Result.html"));*/
		Assert.assertTrue(true);
	}
	
	/**
	 * Compare the output generated by Wicket ("document") with the a previously generated file
	 * which contains the expected result.
	 * 
	 * @param document
	 *            Current output
	 * @param file
	 *            Expected output
	 * @param clazz
	 *            Used to load the file (relative to clazz package)
	 * @return true, if equal
	 * @throws IOException
	 */
	public final boolean validatePage(String document, final Class<?> clazz,
		final String file) throws IOException
	{
		String filename = clazz.getPackage().getName();
		filename = filename.replace('.', '/');
		filename += "/" + file;

		InputStream in = clazz.getClassLoader().getResourceAsStream(filename);
		if (in == null)
		{
			throw new IOException("File not found: " + filename);
		}

		String reference = Streams.readString(in);

		// replace all line endings with unix style line ending
		reference = reference.replaceAll("\n\r", "\n");
		reference = reference.replaceAll("\r\n", "\n");

		// replace all line endings with unix style line ending
		document = document.replaceAll("\n\r", "\n");
		document = document.replaceAll("\r\n", "\n");

		boolean equals = compareMarkup(document, reference);
		if (!equals)
		{
			// Clean up
			StringList list1 = StringList.tokenize(reference, "\n");
			StringList list2 = StringList.tokenize(document, "\n");
			Integer index = 0;
			
			for(String str : list1.toList()){
				if(str == null || str.trim().length() <= 0){
					list1.remove(index);
					index--;
				}
				index++;
			}
			
			index = 0;
			for(String str : list2.toList()){
				if(str == null || str.trim().length() <= 0){
					list1.remove(index);
					index--;
				}
				index++;
			}
			
			// Comparaison
			String[] test1 = list1.toArray();
			String[] test2 = list2.toArray();
			equals = Arrays.equals(test1, test2);
			
			if(!equals){
				Diff df = new Diff(test1);
				Revision r;
				try
				{
					r = df.diff(test2);
				}
				catch (DifferentiationFailedException e)
				{
					throw new RuntimeException(e);
				}

				log.info("Revision : \n" + r.toString());
				
				String temp = r.toString().
					replace('\n', ' ').
					replace('\r', ' ').
					replace('\t', ' ').trim();
				if(temp.length() <= 0){
					equals = true;
				}
				else{
					Assert.assertEquals(filename, reference, document);
				}				
			}
		}

		return equals;
	}
}
